<?php/*    Copyright (C) 2020  Fred Ciabattoni - ProjectOverground v1.0    http://projectoverground.com/    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>.*/namespace FFW\DB\PDO;use PDO;use PDOException;class Sql extends Connect{    public function __construct()    {        parent::__construct();    }    public function inUpStatement($sql,$arrBind = false) // might delete    {        $bool = false;        try {            $this->connector();            if(!$arrBind) {                $stmt = $this->conn->query($sql);            }else{                $aSize = sizeof($arrBind[0]);                $stmt = $this->conn->prepare($sql);                if($aSize > 1 && $aSize < 4){                    for($i=0;$i<sizeof($arrBind);$i++) {                        $type = (int) $arrBind[$i][2];                        $stmt->bindValue($arrBind[$i][0],$arrBind[$i][1],$type);                    }                    if($stmt->execute()){                        $bool = true;                    }                }else {                    if($stmt->execute($arrBind)){                        $bool = true;                    }                }            }            $this->disconnect();            return $bool;        }catch(PDOException $e){            return false;        }    }    public function statement($sql,$arrBind = false)    {        try {            $this->connector();            if(!$arrBind) {                $stmt = $this->conn->query($sql);            }else{                $stmt = $this->conn->prepare($sql);                $stmt->execute($arrBind);            }            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);            $row_count = $stmt->rowCount();            $this->disconnect();            return array('count' => $row_count, 'results' => $results);        }catch(PDOException $e){            return false;        }    }}?>