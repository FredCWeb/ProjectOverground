<?php/*    Copyright (C) 2018  Fred Ciabattoni - ProjectOverground v1.0    http://projectoverground.com/    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>.*/namespace FFW\STORE;use FFW\System;class Sessions extends System{    public $session;    public function __construct()    {        parent::__construct();        if($this->sessionVars['allowSession']) {            $this->startSession();            $this->session = $_SESSION;        }    }    private function startSession()    {        if(!isset($_SESSION))        {            if($this->sessionVars['name'] != '') {                $this->sessionName($this->sessionVars['name']);            }            if($this->sessionVars['limiter'] != '') {                $this->sessionCacheLimiter($this->sessionVars['limiter']);            }            if($this->sessionVars['expire'] != '') {                $this->sessionCacheExpire($this->sessionVars['expire']);            }            if($this->sessionVars['cookie']['lifetime'] != '') {                $this->sessionSetCookieParams($this->sessionVars['cookie']['lifetime'], $this->sessionVars['cookie']['path'], $this->sessionVars['cookie']['domain'], $this->sessionVars['cookie']['secure'], $this->sessionVars['cookie']['httponly']);            }            session_start();        }    }    public function sessionSetCookieParams($lifetime,$path,$domain,$secure = false,$httponly = false)    {        if($path){            session_set_cookie_params($lifetime,$path);        }else if($path && $domain){            session_set_cookie_params($lifetime,$path,$domain);        }else if($path && $domain && $secure){            session_set_cookie_params($lifetime,$path,$domain,$secure);        }else if($path && $domain && $secure && $httponly){            session_set_cookie_params($lifetime,$path,$domain,$secure,$httponly);        }else {            session_set_cookie_params($lifetime);        }    }    public function sessionName($name)    {        return session_name ($name);    }    public function sessionId($id)    {        return session_id ($id);    }    public function sessionEncode()    {        return session_encode();    }    public function sessionDecode($data)    {        return session_decode($data);    }    public function sessionCacheLimiter($val = null)    {        return session_cache_limiter($val);    }    public function sessionCacheExpire($val = null)    {        return session_cache_expire($val);    }    public function sessionGetCookieParams()    {        return session_get_cookie_params();    }    public function sessionAdd($key,$value)    {        $_SESSION[$key] = $value;        $this->session = $_SESSION;    }    public function sessionUnset()    {        session_unset();    }    public function sessionDestroy()    {        session_destroy();    }}?>