<?php/*    Copyright (C) 2020  Fred Ciabattoni - ProjectOverground v1.0    http://projectoverground.com/    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>.*/namespace FFW\HTML;class Valid{    public $json;    public $postVal;    public $success;    public function __construct($post)    {        $error = false;        $postFinalVal = array();        for($i=0;$i<sizeof($post);$i++){            $errorMessage = '';            if(!is_array($post[$i]['value'])) {                $val = $this->trim($post[$i]['value']);            }else{                $val = $post[$i]['value'];            }            $key = $post[$i]['key'];            if (!isset($post[$i]['inArray']) && isset($post[$i]['stripTag']) && $post[$i]['stripTag']) {                $val = $this->stripTag($val);            }            if (isset($post[$i]['upper']) && $post[$i]['upper'] && !is_array($val)) {                $val = strtoupper($val);            }            if (isset($post[$i]['lower']) && $post[$i]['lower'] && !is_array($val)) {                $val = strtolower($val);            }            if (isset($post[$i]['max']) && is_numeric($post[$i]['max']) && $val != '') {                $max = $post[$i]['max'];            } else {                $max = '';            }            if (isset($post[$i]['min']) && is_numeric($post[$i]['min']) && $val != '') {                $min = $post[$i]['min'];            } else {                $min = '';            }            if($max != '' || $min != ''){                if(!$this->strLen($val,$max,$min)){                    $error = true;                    $errorMessage .= 'Your input must be between '.$min.' - '.$max.' characters. ';                }            }            if (isset($post[$i]['required']) && $post[$i]['required']) {                if($val == ''){                    $error = true;                    $errorMessage .= 'Field can not be empty. ';                }            }            if(isset($post[$i]['dateValidate']) && $val != ''){                if(!$this->validateDate($val,$post[$i]['dateValidate'])){                    $error = true;                    $errorMessage .= 'The time is not in the right format. ';                }            }            if(isset($post[$i]['email']) && $post[$i]['email'] && $val != ''){                if(!$this->emailCheck($val)){                    $error = true;                    $errorMessage .= 'Your email is not valid. ';                }            }            if(isset($post[$i]['int']) && $post[$i]['int'] && $val != ''){                if(!$this->isNum($val)){                    $error = true;                    $errorMessage .= 'Field must be a number. ';                }            }            if(isset($post[$i]['float']) && $post[$i]['float'] && $val != ''){                if(isset($post[$i]['floatLimit']) && is_numeric($post[$i]['floatLimit'])){                    $floatLimit = $post[$i]['floatLimit'];                }else{                    $floatLimit = false;                }                if(!$this->isFloat($val,$floatLimit)){                    $error = true;                    if($floatLimit){                        $errorMessage .= 'Field must be a decimal limited '.$floatLimit.' places. ';                    }else {                        $errorMessage .= 'Field must be a decimal. ';                    }                }            }            if(isset($post[$i]['domain']) && $post[$i]['domain'] && $val != ''){                if(!$this->checkLink($val)){                    $error = true;                    $errorMessage .= 'Your link is not a valid format. ';                }            }            if(isset($post[$i]['match']) && $post[$i]['match'] && $val != ''){                if(isset($post[$i]['matchAgainst']) && $post[$i]['matchAgainst'] != ''){                    $confirm = $post[$i]['matchAgainst'];                    if($confirm != $val){                        $error = true;                        $errorMessage .= 'The fields must have the same value... ';                    }                }else{                    $error = true;                    $errorMessage .= 'The matching field can not be blank... ';                }            }            if(isset($post[$i]['notInArray']) && $post[$i]['notInArray'] && $val != ''){                if(isset($post[$i]['arrayValues']) && is_array($post[$i]['arrayValues']) && in_array($val,$post[$i]['arrayValues'])){                    $error = true;                    $errorMessage .= 'Not a valid value. ';                }            }            if(isset($post[$i]['inArray']) && $post[$i]['inArray'] && $val != ''){                $arrTemp = array();                if(is_array($val)){                    if(isset($post[$i]['selectionLimit'])){                        if(isset($post[$i]['selectionLimit']) && sizeof($val) > $post[$i]['selectionLimit'] && $post[$i]['selectionLimit'] > 0){                            $error = true;                            $errorMessage .= 'Please only select '.$post[$i]['selectionLimit'].'...';                        }                    }                    foreach($val as $value) {                        if (isset($post[$i]['stripTag']) && $post[$i]['stripTag']) {                            $arrTemp[] = $this->stripTag($value);                        }                        if(isset($post[$i]['arrayValues']) && is_array($post[$i]['arrayValues']) && !in_array($value,$post[$i]['arrayValues'])) {                            $error = true;                            $errorMessage .= 'Option selected is not in the list of answers...';                        }                    }                }else if(isset($post[$i]['arrayValues']) && is_array($post[$i]['arrayValues']) && !in_array($val,$post[$i]['arrayValues'])){                    $error = true;                    $errorMessage .= 'Your input selected is not in the list of options. ';                }else if(isset($post[$i]['delimiter']) && $post[$i]['delimiter'] != ''){                    $arrSplit = explode($post[$i]['delimiter'],$val);                    $validationType = $post[$i]['validationType'];                    $a=0;                    foreach($arrSplit as $value) {                        $tValue = trim($value);                        if(isset($post[$i]['stripTag']) && $post[$i]['stripTag']) {                            $tValue = $this->stripTag($tValue);                        }                        if($validationType == 'email'){                            if(!$this->emailCheck($tValue)){                                $error = true;                                $errorMessage .= 'Your email is not valid. ';                                break;                            }                        }                        if($validationType == 'int'){                            if(!$this->isNum($tValue)){                                $error = true;                                $errorMessage .= 'Field must be a number. ';                                break;                            }                        }                        if($a!=0){                            $val .= $post[$i]['delimiter'].$tValue;                        }else{                            $val = $tValue;                        }                        $a++;                    }                    //$error = true;                    //$errorMessage .= '';                }                if(sizeof($arrTemp) > 0){                    $val = $arrTemp;                }            }else if(isset($post[$i]['inArray']) && !$post[$i]['inArray'] && $val != ''){                if(is_array($val)) {                    if (isset($post[$i]['selectionLimit'])) {                        if (isset($post[$i]['selectionLimit']) && sizeof($val) > $post[$i]['selectionLimit'] && $post[$i]['selectionLimit'] > 0) {                            $error = true;                            $errorMessage .= 'Please only select ' . $post[$i]['selectionLimit'] . '...';                        }                    }                }            }            if(isset($post[$i]['phone']) && $post[$i]['phone'] != '' && $val != ''){                if(!$this->phone($val,$post[$i]['phone'])){                    if($post[$i]['phone'] == 'All'){                        $str = '000-000-0000 or 0000000000 or (000) 000-0000';                    }else{                        $str = $post[$i]['phone'];                    }                    $error = true;                    $errorMessage .= 'Your phone is not a valid format, needs to be "'.$str.'". ';                }            }            if(isset($post[$i]['customErrorMessage']) && $post[$i]['customErrorMessage'] != '' && $errorMessage != ''){                $errorMessage = $post[$i]['customErrorMessage'];            }            $return[$key] = $errorMessage;            $postFinalVal[$key] = $val;        }        if($error){            $return['success'] = false;        }else{            $return['success'] = true;        }        $this->json = json_encode($return);        $this->postVal = $postFinalVal;        $this->success = $return['success'];    }    private function phone($val,$type = 'All'){        $boolMatch = false;        if(preg_match("/^[0-9]{3}-[0-9]{3}-[0-9]{4}$/", $val) && $type == '000-000-0000') { // 000-000-0000            $boolMatch = true;        }else if(preg_match("/^[0-9]{10}$/", $val) && $type == '0000000000') { // 0000000000            $boolMatch = true;        }else if(preg_match('/\(\d{3}\)\d{3}-\d{4}/', $val) && $type == '(000)000-0000') { // (000)000-0000            $boolMatch = true;        }else if($type == 'All') {            if ( preg_match( '/^[+]?([\d]{0,3})?[\(\.\-\s]?([\d]{3})[\)\.\-\s]*([\d]{3})[\.\-\s]?([\d]{4})$/', $val) ) {                $boolMatch = true;            } else {                $boolMatch = false;            }        }        return $boolMatch;    }    private function checkLink($val){        if (filter_var($val, FILTER_VALIDATE_URL) !== false){            return true;        }else{            return false;        }    }    private function emailCheck($val){        $email_domain = preg_replace('/^.+?@/', '', $val).'.';        if (!filter_var($val, FILTER_VALIDATE_EMAIL)) {            return false;        }else if(!checkdnsrr($email_domain, 'MX') && !checkdnsrr($email_domain, 'A')) {            return false;        }else{            return true;        }    }    private function validateDate($date, $format = 'Y-m-d H:i:s')    {        $d = \DateTime::createFromFormat($format, $date);        return $d && $d->format($format) == $date;    }    private function emptyString($val){        if(empty($val) === true){            return true;        }else{            return false;        }    }    private function stripTag($val){        return strip_tags($val);    }    private function trim($val){        return trim($val);    }    private function isNum($val){        return is_numeric($val);    }    private function isFloat($val,$decLimit = false){        $arrTemp = explode(".",$val);        if(is_numeric($arrTemp[0]) && (isset($arrTemp[1]) && is_numeric($arrTemp[1]))) {            if (strpos($val, ".") !== false) {                if($decLimit && (strlen($arrTemp[1]) == $decLimit)){                    return true;                }else if($decLimit && (strlen($arrTemp[1]) < $decLimit)){                    return false;                }else if($decLimit && (strlen($arrTemp[1]) > $decLimit)){                    return false;                }else{                    return true;                }            }else{                return false;            }        }        return false;    }    private function strLen($val,$max,$min){        $boolResponse = true;        $length = strlen($val);        if($length > $max && $max != ''){            $boolResponse = false;        }        if($length < $min && $min != ''){            $boolResponse = false;        }        return $boolResponse;    }}?>